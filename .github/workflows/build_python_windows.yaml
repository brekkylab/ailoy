name: Python Windows Build

on:
  workflow_dispatch:

env:
  BUILDPACK_IMAGE: ghcr.io/brekkylab/ailoy-buildpack-windows:20250704

jobs:
  build-windows:
    runs-on: windows-2022

    strategy:
      matrix:
        include:
          - py-version: "3.10"
            py-full-version: "3.10.11"
          - py-version: "3.11"
            py-full-version: "3.11.9"
          - py-version: "3.12"
            py-full-version: "3.12.10"
          - py-version: "3.13"
            py-full-version: "3.13.5"

    continue-on-error: true

    steps:
      - uses: actions/checkout@v4

      - name: Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull buildpack image
        run: |
          docker pull ${{ env.BUILDPACK_IMAGE }}

      - name: Build package
        run: |
          $currentPath = (Get-Location).Path
          docker run --rm `
            -v "${currentPath}:C:\workspace" `
            -w "C:\workspace" `
            ${{ env.BUILDPACK_IMAGE }} `
            powershell -Command @"
              Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser -Force

              # Enable long path
              Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem" -Name "LongPathsEnabled" -Value 1
              git config --system core.longpaths true

              # Function to download files
              function Download-File {
                param([string]`$Url, [string]`$Output)
                Write-Host "Downloading `$Url to `$Output"
                try {
                  Invoke-WebRequest -Uri `$Url -OutFile `$Output -UseBasicParsing
                  Write-Host "Download completed successfully"
                } catch {
                  Write-Error "Failed to download `$Url : `$_"
                  exit 1
                }
              }

              # Create temp directory
              `$TempDir = 'C:\temp_setup'
              New-Item -ItemType Directory -Path `$TempDir -Force | Out-Null

              # =============================================
              # Install Python
              # =============================================
              Write-Host "=== Installing Python ${{ matrix.py-version }} ==="
              `$PythonUrl = "https://www.python.org/ftp/python/${{ matrix.py-full-version }}/python-${{ matrix.py-full-version }}-amd64.exe"
              `$PythonInstaller = "`$TempDir\\python-installer.exe"

              Download-File -Url `$PythonUrl -Output `$PythonInstaller

              Write-Host 'Installing Python...'
              Start-Process -FilePath `$PythonInstaller -ArgumentList '/quiet', 'InstallAllUsers=1', 'PrependPath=1', 'Include_test=0', 'Include_doc=0', 'Include_dev=1', 'Include_debug=0', 'Include_launcher=1', 'InstallLauncherAllUsers=1' -Wait -NoNewWindow

              # Refresh PATH
              `$env:PATH = [System.Environment]::GetEnvironmentVariable('PATH', 'Machine') + ';' + [System.Environment]::GetEnvironmentVariable('PATH', 'User')

              # Verify Python installation
              python --version
              if (`$LASTEXITCODE -ne 0) {
                Write-Error 'Python installation failed'
                exit 1
              }

              # Upgrade pip
              Write-Host 'Upgrading pip...'
              python -m pip install --upgrade pip

              # =============================================
              # Build ailoy-py
              # =============================================
              Write-Host '=== Build Ailoy ==='

              Set-Location 'bindings\python'

              python -m pip install build scikit-build-core delvewheel

              `$env:CMAKE_BUILD_PARALLEL_LEVEL = (Get-WmiObject Win32_Processor).NumberOfLogicalProcessors
              python -m build -w --outdir dist
              if (`$LASTEXITCODE -ne 0) {
                Write-Error 'python build failed'
                exit 1
              }

              `$DistWheel = Get-ChildItem dist\*.whl | Select-Object -First 1
              `$CurrentPath = (Get-Location).Path
              python -m delvewheel repair -w wheelhouse `$DistWheel --add-path "`$CurrentPath\build\_deps\tvm-build\Release" --exclude vulkan-1.dll
              if (`$LASTEXITCODE -ne 0) {
                Write-Error 'delvewheel failed'
                exit 1
              }

              Write-Host '=== Build Complete ==='
          "@

      - name: Get package name
        working-directory: ${{ github.workspace }}/bindings/python
        run: |
          $wheel = Get-ChildItem wheelhouse\*.whl | Select-Object -First 1
          echo "WHEEL_FILENAME=$($wheel.Name)" >> $env:GITHUB_ENV

      - name: Upload wheel artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.WHEEL_FILENAME }}
          path: ${{ github.workspace }}/bindings/python/wheelhouse/${{ env.WHEEL_FILENAME }}
