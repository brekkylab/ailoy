# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
import typing
from enum import Enum

CacheResultT = typing.TypeVar("CacheResultT")

class CacheProgress:
    @property
    def comment(self) -> builtins.str: ...
    @property
    def current(self) -> builtins.int: ...
    @property
    def total(self) -> builtins.int: ...
    def __repr__(self) -> builtins.str: ...

class Message:
    @property
    def role(self) -> Role: ...
    @property
    def id(self) -> typing.Optional[builtins.str]: ...
    @property
    def thinking(self) -> builtins.str: ...
    @property
    def contents(self) -> builtins.list[Part]: ...
    @property
    def tool_calls(self) -> builtins.list[Part]: ...
    @property
    def signature(self) -> typing.Optional[builtins.str]: ...
    @role.setter
    def role(self, value: Role) -> None: ...
    @id.setter
    def id(self, value: typing.Optional[builtins.str]) -> None: ...
    @thinking.setter
    def thinking(self, value: builtins.str) -> None: ...
    @contents.setter
    def contents(self, value: builtins.list[Part]) -> None: ...
    @tool_calls.setter
    def tool_calls(self, value: builtins.list[Part]) -> None: ...
    @signature.setter
    def signature(self, value: typing.Optional[builtins.str]) -> None: ...

class MessageDelta:
    @property
    def role(self) -> typing.Optional[Role]: ...
    @property
    def id(self) -> typing.Optional[builtins.str]: ...
    @property
    def thinking(self) -> builtins.str: ...
    @property
    def contents(self) -> builtins.list[PartDelta]: ...
    @property
    def tool_calls(self) -> builtins.list[PartDelta]: ...
    @property
    def signature(self) -> typing.Optional[builtins.str]: ...
    @role.setter
    def role(self, value: typing.Optional[Role]) -> None: ...
    @id.setter
    def id(self, value: typing.Optional[builtins.str]) -> None: ...
    @thinking.setter
    def thinking(self, value: builtins.str) -> None: ...
    @contents.setter
    def contents(self, value: builtins.list[PartDelta]) -> None: ...
    @tool_calls.setter
    def tool_calls(self, value: builtins.list[PartDelta]) -> None: ...
    @signature.setter
    def signature(self, value: typing.Optional[builtins.str]) -> None: ...

class MessageOutput:
    @property
    def delta(self) -> MessageDelta: ...
    @property
    def finish_reason(self) -> typing.Optional[FinishReason]: ...
    @delta.setter
    def delta(self, value: MessageDelta) -> None: ...
    @finish_reason.setter
    def finish_reason(self, value: typing.Optional[FinishReason]) -> None: ...

class Part:
    class Text(Part):
        __match_args__ = ("text",)
        @property
        def text(self) -> builtins.str: ...
        def __new__(cls, text:builtins.str) -> Part.Text: ...
    
    class Function(Part):
        __match_args__ = ("id", "f",)
        @property
        def id(self) -> typing.Optional[builtins.str]: ...
        @property
        def f(self) -> PartFunction: ...
        def __new__(cls, id:typing.Optional[builtins.str], f:PartFunction) -> Part.Function: ...
    
    class Value(Part):
        __match_args__ = ("value",)
        @property
        def value(self) -> typing.Any: ...
        def __new__(cls, value:typing.Any) -> Part.Value: ...
    
    class Image(Part):
        __match_args__ = ("image",)
        @property
        def image(self) -> PartImage: ...
        def __new__(cls, image:PartImage) -> Part.Image: ...
    
    ...

class PartDelta:
    class Text(PartDelta):
        __match_args__ = ("text",)
        @property
        def text(self) -> builtins.str: ...
        def __new__(cls, text:builtins.str) -> PartDelta.Text: ...
    
    class Function(PartDelta):
        __match_args__ = ("id", "f",)
        @property
        def id(self) -> typing.Optional[builtins.str]: ...
        @property
        def f(self) -> PartDeltaFunction: ...
        def __new__(cls, id:typing.Optional[builtins.str], f:PartDeltaFunction) -> PartDelta.Function: ...
    
    class Null(PartDelta):
        __match_args__ = ((),)
        def __new__(cls) -> PartDelta.Null: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    ...

class PartDeltaFunction:
    class Verbatim(PartDeltaFunction):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> builtins.str: ...
        def __new__(cls, _0:builtins.str) -> PartDeltaFunction.Verbatim: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class WithStringArgs(PartDeltaFunction):
        __match_args__ = ("name", "args",)
        @property
        def name(self) -> builtins.str: ...
        @property
        def args(self) -> builtins.str: ...
        def __new__(cls, name:builtins.str, args:builtins.str) -> PartDeltaFunction.WithStringArgs: ...
    
    class WithParsedArgs(PartDeltaFunction):
        __match_args__ = ("name", "args",)
        @property
        def name(self) -> builtins.str: ...
        @property
        def args(self) -> typing.Any: ...
        def __new__(cls, name:builtins.str, args:typing.Any) -> PartDeltaFunction.WithParsedArgs: ...
    
    ...

class PartFunction:
    @property
    def name(self) -> builtins.str: ...
    @property
    def args(self) -> typing.Any: ...
    @name.setter
    def name(self, value: builtins.str) -> None: ...
    @args.setter
    def args(self, value: typing.Any) -> None: ...

class PartImage:
    class Binary(PartImage):
        __match_args__ = ("h", "w", "c", "nbytes", "data",)
        @property
        def h(self) -> builtins.int: ...
        @property
        def w(self) -> builtins.int: ...
        @property
        def c(self) -> PartImageColorspace: ...
        @property
        def nbytes(self) -> builtins.int: ...
        @property
        def data(self) -> typing.Any: ...
        def __new__(cls, h:builtins.int, w:builtins.int, c:PartImageColorspace, nbytes:builtins.int, data:typing.Any) -> PartImage.Binary: ...
    
    ...

class ToolDesc:
    ...

class FinishReason(Enum):
    Stop = ...
    Length = ...
    ToolCall = ...
    Refusal = ...

class PartImageColorspace(Enum):
    Grayscale = ...
    RGB = ...
    RGBA = ...

class Role(Enum):
    r"""
    The author of a message (or streaming delta) in a chat.
    """
    System = ...
    r"""
    System instructions and constraints provided to the assistant.
    """
    User = ...
    r"""
    Content authored by the end user.
    """
    Assistant = ...
    r"""
    Content authored by the assistant/model.
    """
    Tool = ...
    r"""
    Outputs produced by external tools/functions
    """
