# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
import typing

CacheResultT = typing.TypeVar("CacheResultT")

class AgentRunIterator:
    def __aiter__(self) -> AgentRunIterator: ...
    def __anext__(self) -> typing.Any: ...

class AgentRunSyncIterator:
    def __iter__(self) -> AgentRunSyncIterator: ...
    def __next__(self) -> typing.Optional[MessageOutput]: ...

class CacheProgress(typing.Generic[CacheResultT]):
    @property
    def comment(self) -> builtins.str: ...
    @property
    def current(self) -> builtins.int: ...
    @property
    def total(self) -> builtins.int: ...
    @property
    def result(self) -> typing.Optional[CacheResultT]: ...

class CacheProgressIterator(typing.Generic[CacheResultT]):
    def __aiter__(self) -> CacheProgressIterator[CacheResultT]: ...
    def __anext__(self) -> typing.Awaitable[typing.Optional[CacheProgress[CacheResultT]]]: ...

class CacheProgressSyncIterator(typing.Generic[CacheResultT]):
    def __iter__(self) -> CacheProgressSyncIterator[CacheResultT]: ...
    def __next__(self) -> typing.Optional[CacheProgress[CacheResultT]]: ...

class LocalLanguageModel:
    @classmethod
    def create(cls, model_name:builtins.str) -> CacheProgressIterator[LocalLanguageModel]: ...
    @classmethod
    def create_sync(cls, model_name:builtins.str) -> CacheProgressSyncIterator[LocalLanguageModel]: ...
    def run(self, messages:typing.Sequence[Message]) -> AgentRunIterator: ...
    def run_sync(self, messages:typing.Sequence[Message]) -> AgentRunSyncIterator: ...

class Message:
    @property
    def role(self) -> typing.Optional[builtins.str]: ...
    @property
    def content(self) -> list: ...
    @property
    def reasoning(self) -> str: ...
    @property
    def tool_calls(self) -> list: ...
    @content.setter
    def content(self, value: builtins.list[Part]) -> None: ...
    @reasoning.setter
    def reasoning(self, value: builtins.str) -> None: ...
    @tool_calls.setter
    def tool_calls(self, value: builtins.list[Part]) -> None: ...
    def __new__(cls, role:builtins.str) -> Message:
        r"""
        Message(role: str)
        role is one of: "system" | "user" | "assistant" | "tool"
        """
    def append_content(self, part:Part) -> None: ...
    def append_tool_call(self, part:Part) -> None: ...

class MessageAggregator:
    ...

class MessageOutput:
    ...

class Part:
    @property
    def part_type(self) -> builtins.str: ...
    @property
    def text(self) -> typing.Optional[builtins.str]: ...
    @property
    def function(self) -> typing.Optional[builtins.str]: ...
    @property
    def url(self) -> typing.Optional[builtins.str]: ...
    @property
    def data(self) -> typing.Optional[builtins.str]: ...
    @property
    def mime_type(self) -> typing.Optional[builtins.str]: ...
    def __new__(cls, part_type:builtins.str, *, text:typing.Optional[builtins.str]=None, url:typing.Optional[builtins.str]=None, data:typing.Optional[builtins.str]=None, mime_type:typing.Optional[builtins.str]=None, function:typing.Optional[builtins.str]=None, id:typing.Optional[builtins.str]=None, name:typing.Optional[builtins.str]=None, arguments:typing.Optional[builtins.str]=None) -> Part:
        r"""
        Part(part_type, *, id=None, text=None, url=None, data=None, function=None)
        
        Examples:
        - Part(part_type="text", text="hello")
        - Part(part_type="image", url="https://example.com/cat.png")
        - Part(part_type="image", data="<base64>", mime_type="image/jpeg")  # 'base64=' alias also accepted
        - Part(part_type="function", function='{"name":"foo","arguments":"{}"}')
        """

