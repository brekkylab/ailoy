import * as fs from "node:fs";
import prettier from "prettier";
import { Project, SyntaxKind } from "ts-morph";

const project = new Project();
const sourceFile = project.addSourceFileAtPath("src/ailoy-web.d.ts");

const getGroupOrder = (kind) => {
  if (kind === SyntaxKind.ImportDeclaration) return 0;
  if (kind === SyntaxKind.ClassDeclaration) return 1;
  if (
    kind === SyntaxKind.TypeAliasDeclaration ||
    kind === SyntaxKind.InterfaceDeclaration
  )
    return 2;
  if (kind === SyntaxKind.FunctionDeclaration) return 3;
  if (kind === SyntaxKind.VariableDeclaration) return 4;
  return 99;
};

const statements = sourceFile.getStatements();

const statementData = statements
  .map((stmt) => ({
    kind: stmt.getKind(),
    name: stmt.getSymbol()?.getName() || stmt.getName?.() || "",
    fullText: stmt.getFullText(),
    statement: stmt,
  }))
  .filter(({ name }) => {
    // Remove unused types generated by wasm-bindgen.
    const isIgnored = [
      "IntoUnderlyingByteSource",
      "IntoUnderlyingSink",
      "IntoUnderlyingSource",
      "ReadableStreamType",
    ].includes(name);
    return !isIgnored;
  });

const sorted = statementData.sort((a, b) => {
  const aGroup = getGroupOrder(a.kind);
  const bGroup = getGroupOrder(b.kind);

  if (aGroup !== bGroup) {
    return aGroup - bGroup;
  }

  return a.name.localeCompare(b.name);
});

let newContent = "";
let lastGroup = -1;

sorted.forEach((data) => {
  const currentGroup = getGroupOrder(data.kind);

  if (lastGroup !== -1 && lastGroup !== currentGroup) {
    newContent += "\n\n";
  }

  const trimmedText = data.fullText.trimStart();
  newContent += trimmedText;

  if (!newContent.endsWith("\n")) {
    newContent += "\n\n";
  }

  lastGroup = currentGroup;
});

// Apply prettier
const prettierConfig = await prettier.resolveConfigFile();
const options = prettierConfig
  ? await prettier.resolveConfig(prettierConfig)
  : {};
const formatted = await prettier.format(newContent, {
  ...options,
  filepath: "src/ailoy-web.d.ts",
});

// Save revised typedef
fs.writeFileSync("src/ailoy-web.d.ts", formatted, "utf8");
