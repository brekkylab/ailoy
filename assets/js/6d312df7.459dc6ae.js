"use strict";(self.webpackChunkailoy_docs=self.webpackChunkailoy_docs||[]).push([[66],{4681:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"tutorial/integrate-with-mcp","title":"Integrate with MCP","description":"The Model Context Protocol (MCP) is an open protocol developed by Anthropic","source":"@site/docs/tutorial/integrate-with-mcp.mdx","sourceDirName":"tutorial","slug":"/tutorial/integrate-with-mcp","permalink":"/ailoy/docs/tutorial/integrate-with-mcp","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"documentSidebar","previous":{"title":"Using Tools","permalink":"/ailoy/docs/tutorial/using-tools"},"next":{"title":"Calling Low-Level APIs","permalink":"/ailoy/docs/tutorial/calling-low-level-apis"}}');var a=t(4848),i=t(8453);const r={},s="Integrate with MCP",l={},d=[{value:"Using MCP with Ailoy",id:"using-mcp-with-ailoy",level:3},{value:"Querying via MCP Tools",id:"querying-via-mcp-tools",level:3},{value:"Complete Example",id:"complete-example",level:3}];function c(e){const n={code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components},{TabItem:t,Tabs:o,TerminalBox:r}=n;return t||p("TabItem",!0),o||p("Tabs",!0),r||p("TerminalBox",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"integrate-with-mcp",children:"Integrate with MCP"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.strong,{children:"Model Context Protocol (MCP)"})," is an open protocol developed by Anthropic\nto standardize how language models interact with external systems\u2014such as tools,\nmemory backends, and context managers. MCP enables structured, dynamic\ncommunication between an LLM and its environment, empowering models to access\nexternal tools, retrieve real-time information, and perform complex, multi-step\nreasoning."]}),"\n",(0,a.jsx)(n.h3,{id:"using-mcp-with-ailoy",children:"Using MCP with Ailoy"}),"\n",(0,a.jsx)(n.p,{children:"Ailoy Agents can seamlessly integrate with existing MCP-compliant servers. For\nexample, the following code connects to the official GitHub MCP server:"}),"\n",(0,a.jsxs)(o,{groupId:"code-language",children:[(0,a.jsx)(t,{value:"python",label:"Python",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:'from mcp import StdioServerParameters\n\nagent.add_tools_from_mcp_server(\n    StdioServerParameters(\n        "github",\n        command="npx",\n        args=["-y", "@modelcontextprotocol/server-github"]\n    )\n)\n'})})}),(0,a.jsx)(t,{value:"node",label:"JavaScript(Node)",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",metastring:"showLineNumbers",children:'await agent.addToolsFromMcpServer("github", {\n  command: "npx",\n  args: ["-y", "@modelcontextprotocol/server-github"],\n});\n'})})})]}),"\n",(0,a.jsx)(n.p,{children:"This launches the GitHub MCP server as a subprocess using standard I/O for\ncommunication. The agent automatically discovers the tools exposed by the server\nand registers them into its internal toolset."}),"\n",(0,a.jsx)(n.h3,{id:"querying-via-mcp-tools",children:"Querying via MCP Tools"}),"\n",(0,a.jsx)(n.p,{children:"Once the tools are registered, the agent can invoke them as needed when you call\nthe query() method:"}),"\n",(0,a.jsxs)(o,{groupId:"code-language",children:[(0,a.jsx)(t,{value:"python",label:"Python",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:'question = "Search the repository named brekkylab/ailoy and describe what it does based on its README.md."\nfor resp in agent.query(question):\n    agent.print(resp)\n'})})}),(0,a.jsx)(t,{value:"node",label:"JavaScript(Node)",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",metastring:"showLineNumbers",children:'const question =\n  "Search the repository named brekkylab/ailoy and describe what it does based on its README.md.";\nfor await (const resp of agent.query(question)) {\n  agent.print(resp);\n}\n'})})})]}),"\n",(0,a.jsx)(n.p,{children:"This demonstrates how the agent utilizes the GitHub MCP tools to search\nrepositories and summarize their contents."}),"\n","\n",(0,a.jsx)(r,{children:'\n\u256d\u2500 Tool Call: github-get_file_contents \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 {                                                                    \u2502\n\u2502   "repo": "ailoy",                                                   \u2502\n\u2502   "path": "README.md",                                               \u2502\n\u2502   "owner": "brekkylab",                                              \u2502\n\u2502   "branch": "feature/add-qwen3-big-models"                           \u2502\n\u2502 }                                                                    \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Tool Result \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 [                                                                    \u2502\n\u2502   "{\\"name\\": \\"README.md\\", \\"path\\": \\"README.md\\", \\"sha\\":       \u2502\n\u2502 \\"563dde166b65319e7614b81a9d8330eee06537d3\\", \\"size\\": 4443,        \u2502\n\u2502 \\"url\\":                                                             \u2502\n\u2502 \\"https://api.github.com/repos/brekkylab/ailoy/contents/README.md?re \u2502\n\u2502 f=feature/add-qwen3-big-models\\", \\"html_url\\":                      \u2502\n\u2502 \\"https://github.com/brekkylab/ailoy/blob/feature/add-qwen3-big-mode \u2502\n\u2502 ls/README.md\\", \\"git_url\\":                                         \u2502\n\u2502 \\"https://api.github.com/repos/brekkylab/ailoy/git/blobs/563dde166b6 \u2502\n\u2502 5319e7614b81a9d8330eee06537d3\\", \\"download_url\\":                   \u2502\n\u2502 \\"https://raw.githubusercontent....(truncated)                       \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nThe repository **brekkylab/ailoy** is a **lightweight library** for building AI applications, such as **agent systems** or **RAG (Retrieval-Augmented Generation) pipelines**. It is designed to simplify the integration and usage of AI models, allowing developers to import and use AI capabilities with minimal effort.\n\n### Key Features:\n- **Support for Local and Cloud AI Models**: It enables the use of local AI models (e.g., Qwen3 variants) and cloud APIs (e.g., OpenAI, Gemini, Claude).\n- **Multi-turn Conversations**: Supports conversational agents with customizable system messages.\n- **Reasoning and Tool Calling**: Facilitates reasoning-based workflows and integration with tools (including `MCP`).\n- **Vector Store Support**: Built-in integration with vector databases like `Faiss` and `ChromaDB`.\n- **Cross-Platform Compatibility**: Works on Windows, macOS (Apple Silicon), and Linux, with specific hardware requirements for local model execution.\n\n### Supported Models:\n- **Local Language Models**: Qwen3 variants (0.6B, 1.7B, 4B, 8B, 14B, 32B, 30B-A3B).\n- **Cloud Models**: OpenAI, Gemini, and Claude.\n- **Embedding Models**: BAAI/bge-m3.\n\n### Use Cases:\n- **Chatbots**: Build simple or advanced chatbots with local or cloud models.\n- **RAG Pipelines**: Combine retrieval and generation for enhanced AI applications.\n- **Custom AI Agents**: Create agents with reasoning capabilities and tool integration.\n\n### Requirements:\n- **Hardware**: At least 8GB of GPU memory is recommended for most models, with higher requirements for larger models like Qwen3-8B (12GB).\n- **OS**: Windows, macOS (Apple Silicon), or Linux with specific versions and drivers.\n\n### Getting Started:\n- **Node.js**: Install via `npm install ailoy-node` and use TypeScript examples.\n- **Python**: Install via `pip install ailoy-py` and use Python examples.\n\nThis repository is in an **early development stage**, and APIs may change. For more details, refer to the [official documentation](https://brekkylab.github.io/ailoy/).\n'}),"\n","\n",(0,a.jsx)(n.h3,{id:"complete-example",children:"Complete Example"}),"\n",(0,a.jsx)(n.p,{children:"Here is the full source code to set up an agent, connect it to the GitHub MCP\nserver, and issue a query:"}),"\n",(0,a.jsxs)(o,{groupId:"code-language",children:[(0,a.jsx)(t,{value:"python",label:"Python",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:'from ailoy import Runtime, Agent, LocalModel\nfrom mcp import StdioServerParameters\n\nrt = Runtime()\nwith Agent(rt, LocalModel("Qwen/Qwen3-8B")) as agent:\n    # Add tools from Github MCP server\n    agent.add_tools_from_mcp_server(\n        "github",\n        StdioServerParameters(\n            command="npx",\n            args=["-y", "@modelcontextprotocol/server-github"]\n        )\n    )\n\n    question = "Search the repository named brekkylab/ailoy and describe what it does based on its README.md."\n    for resp in agent.query(question):\n        agent.print(resp)\n'})})}),(0,a.jsx)(t,{value:"node",label:"JavaScript(Node)",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",metastring:"showLineNumbers",children:'import { startRuntime, defineAgent, LocalModel } from "ailoy-node";\n\n(async () => {\n  const rt = await startRuntime();\n  const agent = await defineAgent(rt, LocalModel({ id: "Qwen/Qwen3-8B" }));\n\n  // Add tools from Github MCP server\n  await agent.addToolsFromMcpServer("github", {\n    command: "npx",\n    args: ["-y", "@modelcontextprotocol/server-github"],\n  });\n\n  const question =\n    "Search the repository named brekkylab/ailoy and describe what it does based on its README.md.";\n  for await (const resp of agent.query(question)) {\n    agent.print(resp);\n  }\n})();\n'})})})]})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}function p(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var o=t(6540);const a={},i=o.createContext(a);function r(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);