"use strict";(self.webpackChunkailoy_docs=self.webpackChunkailoy_docs||[]).push([[66],{8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var o=t(6540);const a={},i=o.createContext(a);function r(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),o.createElement(i.Provider,{value:n},e.children)}},8482:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"tutorial/integrate-with-mcp","title":"Integrate with MCP","description":"The Model Context Protocol (MCP) is an open protocol developed by Anthropic","source":"@site/docs/tutorial/integrate-with-mcp.mdx","sourceDirName":"tutorial","slug":"/tutorial/integrate-with-mcp","permalink":"/ailoy/docs/tutorial/integrate-with-mcp","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"documentSidebar","previous":{"title":"Using Tools","permalink":"/ailoy/docs/tutorial/using-tools"},"next":{"title":"Calling Low-Level APIs","permalink":"/ailoy/docs/tutorial/calling-low-level-apis"}}');var a=t(4848),i=t(8453);const r={},s="Integrate with MCP",l={},d=[{value:"Using MCP with Ailoy",id:"using-mcp-with-ailoy",level:3},{value:"Querying via MCP Tools",id:"querying-via-mcp-tools",level:3},{value:"Complete Example",id:"complete-example",level:3}];function c(e){const n={code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components},{TabItem:t,Tabs:o,TerminalBox:r}=n;return t||m("TabItem",!0),o||m("Tabs",!0),r||m("TerminalBox",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"integrate-with-mcp",children:"Integrate with MCP"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.strong,{children:"Model Context Protocol (MCP)"})," is an open protocol developed by Anthropic\nto standardize how language models interact with external systems\u2014such as tools,\nmemory backends, and context managers. MCP enables structured, dynamic\ncommunication between an LLM and its environment, empowering models to access\nexternal tools, retrieve real-time information, and perform complex, multi-step\nreasoning."]}),"\n",(0,a.jsx)(n.h3,{id:"using-mcp-with-ailoy",children:"Using MCP with Ailoy"}),"\n",(0,a.jsx)(n.p,{children:"Ailoy Agents can seamlessly integrate with existing MCP-compliant servers. For\nexample, the following code connects to the official GitHub MCP server:"}),"\n",(0,a.jsxs)(o,{groupId:"code-language",children:[(0,a.jsx)(t,{value:"python",label:"Python",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:'from mcp import StdioServerParameters\n\nagent.add_tools_from_mcp_server(\n    StdioServerParameters(\n        "github",\n        command="npx",\n        args=["-y", "@modelcontextprotocol/server-github"]\n    )\n)\n'})})}),(0,a.jsx)(t,{value:"node",label:"JavaScript(Node)",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",metastring:"showLineNumbers",children:'await agent.addToolsFromMcpServer("github", {\n  command: "npx",\n  args: ["-y", "@modelcontextprotocol/server-github"],\n});\n'})})})]}),"\n",(0,a.jsx)(n.p,{children:"This launches the GitHub MCP server as a subprocess using standard I/O for\ncommunication. The agent automatically discovers the tools exposed by the server\nand registers them into its internal toolset."}),"\n",(0,a.jsx)(n.h3,{id:"querying-via-mcp-tools",children:"Querying via MCP Tools"}),"\n",(0,a.jsx)(n.p,{children:"Once the tools are registered, the agent can invoke them as needed when you call\nthe query() method:"}),"\n",(0,a.jsxs)(o,{groupId:"code-language",children:[(0,a.jsx)(t,{value:"python",label:"Python",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:'question = "Search the repository named brekkylab/ailoy and describe what it does based on its README.md."\nfor resp in agent.query(question):\n    agent.print(resp)\n'})})}),(0,a.jsx)(t,{value:"node",label:"JavaScript(Node)",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",metastring:"showLineNumbers",children:'const question =\n  "Search the repository named brekkylab/ailoy and describe what it does based on its README.md.";\nfor await (const resp of agent.query(question)) {\n  agent.print(resp);\n}\n'})})})]}),"\n",(0,a.jsx)(n.p,{children:"This demonstrates how the agent utilizes the GitHub MCP tools to search\nrepositories and summarize their contents."}),"\n","\n",(0,a.jsx)(r,{children:'\u256d\u2500 Tool Call: get_file_contents (call_af2808d8-cd87-4dcd-ac9f-62c6862ad5cb) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \n\u2502 {                                                                                             \u2502\n\u2502   "repo": "ailoy",                                                                            \u2502\n\u2502   "path": "README.md",                                                                        \u2502\n\u2502   "owner": "brekkylab",                                                                       \u2502\n\u2502   "branch": "main"                                                                            \u2502\n\u2502 }                                                                                             \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Tool Result: get_file_contents (call_af2808d8-cd87-4dcd-ac9f-62c6862ad5cb) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 [                                                                                             \u2502\n\u2502   "{\\n  "name": "README.md",\\n  "path": "README.md",\\n  "sha":                                \u2502\n\u2502 "377c27678db5b28e3b99e177a6ed937feed52d5d",\\n  "size": 4310,\\n  "url":                        \u2502\n\u2502 "https://api.github.com/repos/brekkylab/ailoy/contents/README.md?ref=main",\\n                 \u2502\n\u2502 "html_url": "https://github.com/brekkylab/ailoy/blob/main/README.md",\\n  "git_url":           \u2502\n\u2502 "https://api.github.com/repos/brekkylab/ailoy/git/blobs/377c27678db5b28e3b99e177a6ed937feed52 | \n| d5d",\\n  "download_url": "https://raw.githubusercontent.com/brekkylab/a...(truncated)         \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nThe repository named `brekkylab/ailoy` is a GitHub repository for the **Ailoy** project, which is a lightweight library for building AI applications. Here\'s a summary of what it does based on its `README.md`:\n\n### Overview\n- **Ailoy** is designed to make it easy to build AI applications such as **agent systems** or **RAG (Retrieval-Augmented Generation) pipelines**.\n- It enables AI features with minimal effort, allowing users to import and use the library without much setup.\n\n### Features\n- **Run AI models**: Supports both on-device and cloud API-based execution of AI models.\n- **Vector store support**: Integrates with libraries like `Faiss` and `ChromaDB` for efficient vector storage and retrieval.\n\n### Supported Models\n- **Language Models**: Includes several versions of Qwen models (e.g., Qwen3-0.6B, Qwen3-1.7B, Qwen3-4B, Qwen3-8B) for on-device use and access to models like `gpt-4o` via API.\n- **Embedding Models**: Supports BAAI/bge-m3 for on-device use.\n\n### Requirements\n- **Operating Systems**: Windows, macOS (Apple Silicon), and Linux.\n- **Hardware**: Requires compatible hardware with sufficient GPU memory, especially for larger models.\n- **Software**: Specific drivers and OS versions are recommended for optimal performance.\n\n### Getting Started\n- **Node.js**: Install via `npm install ailoy-node` and use the provided TypeScript examples.\n- **Python**: Install via `pip install ailoy-py` and use the Python examples.\n- **Build from source**: Instructions are available in the respective `README.md` files for Node.js and Python.\n\n### Additional Information\n- **Documentation**: The official documentation is available at [https://brekkylab.github.io/ailoy/](https://brekkylab.github.io/ailoy/).\n- **Examples**: Several examples are available in the `examples` directory to demonstrate usage and RAG pipelines.\n\n### Notes\n- The library is in an early development stage, so APIs may change without notice.\n- A Discord channel is available for support and questions.\n\nThis library is ideal for developers looking to build AI applications with ease, leveraging pre-trained models and supporting both local and cloud-based AI execution.\n'}),"\n","\n",(0,a.jsx)(n.h3,{id:"complete-example",children:"Complete Example"}),"\n",(0,a.jsx)(n.p,{children:"Here is the full source code to set up an agent, connect it to the GitHub MCP\nserver, and issue a query:"}),"\n",(0,a.jsxs)(o,{groupId:"code-language",children:[(0,a.jsx)(t,{value:"python",label:"Python",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:'from ailoy import Runtime, Agent\nfrom mcp import StdioServerParameters\n\nrt = Runtime()\nwith Agent(rt, model_name="Qwen/Qwen3-8B") as agent:\n    # Add tools from Github MCP server\n    agent.add_tools_from_mcp_server(\n        "github",\n        StdioServerParameters(\n            command="npx",\n            args=["-y", "@modelcontextprotocol/server-github"]\n        )\n    )\n\n    question = "Search the repository named brekkylab/ailoy and describe what it does based on its README.md."\n    for resp in agent.query(question):\n        agent.print(resp)\n'})})}),(0,a.jsx)(t,{value:"node",label:"JavaScript(Node)",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",metastring:"showLineNumbers",children:'import { startRuntime, defineAgent } from "ailoy-node";\n\n(async () => {\n  const rt = await startRuntime();\n  const agent = await defineAgent(rt, "Qwen/Qwen3-8B");\n\n  // Add tools from Github MCP server\n  await agent.addToolsFromMcpServer("github", {\n    command: "npx",\n    args: ["-y", "@modelcontextprotocol/server-github"],\n  });\n\n  const question =\n    "Search the repository named brekkylab/ailoy and describe what it does based on its README.md.";\n  for await (const resp of agent.query(question)) {\n    agent.print(resp);\n  }\n})();\n'})})})]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}function m(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);