"use strict";(self.webpackChunkailoy_docs=self.webpackChunkailoy_docs||[]).push([[715],{2902:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"tutorial/rag-with-vector-store","title":"RAG with Vector Store","description":"Retrieval-Augmented Generation (RAG) is a useful method when you want to use","source":"@site/docs/tutorial/rag-with-vector-store.mdx","sourceDirName":"tutorial","slug":"/tutorial/rag-with-vector-store","permalink":"/ailoy/docs/tutorial/rag-with-vector-store","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"documentSidebar","previous":{"title":"Calling Low-Level APIs","permalink":"/ailoy/docs/tutorial/calling-low-level-apis"},"next":{"title":"Architecture","permalink":"/ailoy/docs/concepts/architecture"}}');var o=t(4848),i=t(8453);const s={},a="RAG with Vector Store",l={},c=[{value:"Initializing a Vector Store",id:"initializing-a-vector-store",level:3},{value:"Inserting Documents into the Vector Store",id:"inserting-documents-into-the-vector-store",level:3},{value:"Retrieving Relevant Documents",id:"retrieving-relevant-documents",level:3},{value:"Constructing an Augmented Prompt",id:"constructing-an-augmented-prompt",level:3},{value:"Complete Example",id:"complete-example",level:3}];function d(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components},{TabItem:t,Tabs:r}=n;return t||h("TabItem",!0),r||h("Tabs",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"rag-with-vector-store",children:"RAG with Vector Store"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Retrieval-Augmented Generation (RAG)"})," is a useful method when you want to use\nAI with your own documents. In RAG, the AI model gets extra knowledge from\noutside sources, usually stored in something called a vector store. Instead of\ndepending only on what the model learned during training, RAG finds and adds\nrelated documents at the time you ask a question. This helps the AI give more\naccurate, up-to-date, and relevant answers."]}),"\n",(0,o.jsxs)(n.p,{children:["In this example, we\u2019ll walk you through a complete RAG workflow \u2014 how to build a\nvector store(",(0,o.jsx)(n.code,{children:"VectorStore"}),") and integrate it to the ",(0,o.jsx)(n.code,{children:"Agent"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"initializing-a-vector-store",children:"Initializing a Vector Store"}),"\n",(0,o.jsxs)(n.p,{children:["Ailoy simplifies the construction of RAG pipelines through its built-in\n",(0,o.jsx)(n.code,{children:"VectorStore"})," component, which works alongside the ",(0,o.jsx)(n.code,{children:"Agent"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"To initialize a vector store:"}),"\n",(0,o.jsxs)(r,{groupId:"code-language",children:[(0,o.jsx)(t,{value:"python",label:"Python",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:'from ailoy import Runtime\nfrom ailoy.vectorstore import VectorStore\n\nrt = Runtime()\nwith VectorStore(rt, "BAAI/bge-m3", "faiss") as vs:\n    ...\n'})})}),(0,o.jsx)(t,{value:"node",label:"JavaScript(Node)",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",metastring:"showLineNumbers",children:'import { startRuntime, defineVectorStore } from "ailoy-node";\n\nconst rt = await startRuntime();\nconst vs = await defineVectorStore(rt, "BAAI/bge-m3", "faiss");\n'})})})]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["Ailoy currently supports both\n",(0,o.jsx)(n.a,{href:"https://github.com/facebookresearch/faiss",children:(0,o.jsx)(n.strong,{children:"FAISS"})})," and\n",(0,o.jsx)(n.a,{href:"https://www.trychroma.com/",children:(0,o.jsx)(n.strong,{children:"ChromaDB"})})," as vector store backends. Refer to\nthe official configuration guide for backend-specific options."]}),"\n"]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["\ud83d\udca1 ",(0,o.jsx)(n.strong,{children:"Note:"})," At this time, the only supported embedding model is\n",(0,o.jsx)(n.a,{href:"https://huggingface.co/BAAI/bge-m3",children:(0,o.jsx)(n.code,{children:"BAAI/bge-m3"})}),". Additional embedding\nmodels will be supported in future releases."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"inserting-documents-into-the-vector-store",children:"Inserting Documents into the Vector Store"}),"\n",(0,o.jsx)(n.p,{children:"You can insert text along with optional metadata into the vector store:"}),"\n",(0,o.jsxs)(r,{groupId:"code-language",children:[(0,o.jsx)(t,{value:"python",label:"Python",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:'vs.insert(\n    "Ailoy is a lightweight library for building AI applications",\n    metadata={"topic": "Ailoy"}\n)\n'})})}),(0,o.jsx)(t,{value:"node",label:"JavaScript(Node)",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",metastring:"showLineNumbers",children:'await vs.insert({\n  document: "Ailoy is a lightweight library for building AI applications",\n  metadata: {\n    topic: "Ailoy",\n  },\n});\n'})})})]}),"\n",(0,o.jsxs)(n.p,{children:["In practice, you should split large documents into smaller chunks before\ninserting them. This improves retrieval quality. You may use any text-splitting\ntool (e.g.,\n",(0,o.jsx)(n.a,{href:"https://python.langchain.com/docs/concepts/text_splitters/",children:"LangChain"}),"), or\nutilize Ailoy\u2019s low-level runtime API for text splitting. (See\n",(0,o.jsx)(n.a,{href:"/ailoy/docs/tutorial/calling-low-level-apis",children:"Calling Low-Level APIs"})," for more details.)"]}),"\n",(0,o.jsx)(n.h3,{id:"retrieving-relevant-documents",children:"Retrieving Relevant Documents"}),"\n",(0,o.jsx)(n.p,{children:"To retrieve documents similar to a given query:"}),"\n",(0,o.jsxs)(r,{groupId:"code-language",children:[(0,o.jsx)(t,{value:"python",label:"Python",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:'query = "What is Ailoy?"\nitems = vs.retrieve(query, top_k=5)\n'})})}),(0,o.jsx)(t,{value:"node",label:"JavaScript(Node)",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",metastring:"showLineNumbers",children:'const query = "What is Ailoy?";\nconst items = await vs.retrieve(query, 5);\n'})})})]}),"\n",(0,o.jsxs)(n.p,{children:["This returns a list of ",(0,o.jsx)(n.code,{children:"VectorStoreRetrieveItem"})," instances representing the most\nrelevant chunks, ranked by similarity. The number of results is controlled via\nthe ",(0,o.jsx)(n.code,{children:"top_k"})," parameter (default is 5)."]}),"\n",(0,o.jsx)(n.h3,{id:"constructing-an-augmented-prompt",children:"Constructing an Augmented Prompt"}),"\n",(0,o.jsx)(n.p,{children:"Once documents are retrieved, you can construct a context-enriched prompt as\nfollows:"}),"\n",(0,o.jsxs)(r,{groupId:"code-language",children:[(0,o.jsx)(t,{value:"python",label:"Python",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:'prompt = f"""\n    Based on the provided contexts, try to answer user\'s question.\n    Context: {[item.document for item in items]}\n    Question: {query}\n"""\n'})})}),(0,o.jsx)(t,{value:"node",label:"JavaScript(Node)",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",metastring:"showLineNumbers",children:"const prompt = `\n  Based on the provided contexts, try to answer user' question.\n  Context: ${items.map((item) => item.document)}\n  Question: ${query}\n`;\n"})})})]}),"\n",(0,o.jsx)(n.p,{children:"You can then pass this prompt to the agent for inference:"}),"\n",(0,o.jsxs)(r,{groupId:"code-language",children:[(0,o.jsx)(t,{value:"python",label:"Python",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:"for resp in agent.query(prompt):\n    agent.print(resp)\n"})})}),(0,o.jsx)(t,{value:"node",label:"JavaScript(Node)",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",metastring:"showLineNumbers",children:"for await (const resp of agent.query(prompt)) {\n  agent.print(resp);\n}\n"})})})]}),"\n",(0,o.jsx)(n.h3,{id:"complete-example",children:"Complete Example"}),"\n",(0,o.jsxs)(r,{groupId:"code-language",children:[(0,o.jsx)(t,{value:"python",label:"Python",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:'from ailoy import Runtime, Agent, LocalModel, VectorStore\n\n# Initialize Runtime\n\nrt = Runtime()\n\n# Initialize Agent and VectorStore\n\nwith Agent(rt, LocalModel("Qwen/Qwen3-8B")) as agent, VectorStore(rt, "BAAI/bge-m3", "faiss") as vs:\n    # Insert items\n    vs.insert(\n        "Ailoy is a lightweight library for building AI applications",\n        metadata={"topic": "Ailoy"}\n    )\n\n    # Search the most relevant items\n    query = "What is Ailoy?"\n    items = vs.retrieve(query, top_k=5)\n\n    # Augment user query\n    prompt = f"""\n        Based on the provided contexts, try to answer user\'s question.\n        Context: {[item.document for item in items]}\n        Question: {query}\n    """\n\n    # Invoke agent\n    for resp in agent.query(prompt):\n        agent.print(resp)\n'})})}),(0,o.jsx)(t,{value:"node",label:"JavaScript(Node)",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",metastring:"showLineNumbers",children:'import {\n  createRuntime,\n  defineAgent,\n  defineVectorStore,\n  LocalModel,\n} from "ailoy-node";\n\nasync function main() {\n  // Initialize Runtime\n  const rt = await createRuntime();\n  // Initialize Agent\n  const agent = await defineAgent(rt, LocalModel({ id: "Qwen/Qwen3-8B" }));\n  // Initialize VectorStore\n  const vs = await defineVectorStore(rt, "BAAI/bge-m3", "faiss");\n\n  // Insert items\n  await vs.insert({\n    document: "Ailoy is a lightweight library for building AI applications",\n    metadata: { topic: "Ailoy" },\n  });\n\n  // Search the most relevant items\n  const query = "What is Ailoy?";\n  const items = await vs.retrieve(query, 5);\n\n  // Augment user query\n  const prompt = `\n    Based on the provided contexts, try to answer user\' question.\n    Context: ${items.map((item) => item.document)}\n    Question: ${query}\n  `;\n\n  // Invoke agent\n  for await (const resp of agent.query(prompt)) {\n    agent.print(resp);\n  }\n\n  // Delete agent\n  await agent.delete();\n}\n'})})})]}),"\n","\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsx)(n.p,{children:"For best results, ensure your documents are chunked semantically (e.g., by paragraphs or sections)."})}),"\n"]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}function h(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var r=t(6540);const o={},i=r.createContext(o);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);