"use strict";(self.webpackChunkailoy_docs=self.webpackChunkailoy_docs||[]).push([[890],{8301:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"tutorial/managing-conversation","title":"Managing conversation","description":"In language models, obtaining the desired answer is typically achieved through a","source":"@site/docs/tutorial/managing-conversation.mdx","sourceDirName":"tutorial","slug":"/tutorial/managing-conversation","permalink":"/ailoy/docs/tutorial/managing-conversation","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"documentSidebar","previous":{"title":"Getting started","permalink":"/ailoy/docs/tutorial/getting-started"},"next":{"title":"Reasoning","permalink":"/ailoy/docs/tutorial/reasoning"}}');var a=s(4848),r=s(8453);const i={},o="Managing conversation",c={},l=[{value:"Overriding system messages",id:"overriding-system-messages",level:2},{value:"Working with message history",id:"working-with-message-history",level:2}];function g(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components},{TabItem:s,Tabs:t}=n;return s||h("TabItem",!0),t||h("Tabs",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"managing-conversation",children:"Managing conversation"})}),"\n",(0,a.jsxs)(n.p,{children:["In language models, obtaining the desired answer is typically achieved through a\n",(0,a.jsx)(n.strong,{children:"conversation"}),". Depending on the response, users may ask follow-up questions\nor provide additional information necessary for the answer. To support this,\nmany models support multi-turn conversation, which implements a continuous flow\nof conversation by providing context for multiple stages of interactions."]}),"\n",(0,a.jsxs)(n.p,{children:["Ailoy's high-level API ",(0,a.jsx)(n.code,{children:"Agent"})," maintains the query/response history, so a\nmulti-turn conversation with LLM can be implemented naturally by repeatedly\nsending queries to ",(0,a.jsx)(n.code,{children:"Agent"})," and receiving the responses in the code context."]}),"\n",(0,a.jsxs)(t,{groupId:"code-language",children:[(0,a.jsx)(s,{value:"python",label:"Python",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:'with Agent(...) as agent:\n    while True:\n        query = input("\\nUser: ")\n\n        if query == "exit":\n            break\n        if query == "":\n            continue\n\n        for resp in agent.query(query):\n            agent.print(resp)\n'})})}),(0,a.jsx)(s,{value:"node",label:"JavaScript(Node)",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",metastring:"showLineNumbers",children:'const agent = await defineAgent(...);\nwhile (true) {\n  const query = await getUserInput("User: ");\n\n  if (query === "exit")\n    break;\n  if (query === "")\n    continue;\n\n  process.stdout.write(`\\nAssistant: `);\n  for await (const resp of agent.query(query)) {\n    agent.print(resp);\n  }\n}\nawait agent.delete();\n'})})})]}),"\n",(0,a.jsx)(n.h2,{id:"overriding-system-messages",children:"Overriding system messages"}),"\n",(0,a.jsxs)(n.p,{children:["To override system message, you can pass the system message string as the\noptional ",(0,a.jsx)(n.code,{children:"system_message"})," argument when you create your agent instance."]}),"\n",(0,a.jsxs)(t,{groupId:"code-language",children:[(0,a.jsx)(s,{value:"python",label:"Python",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:'with Agent(\n    ...,\n    system_message="You are a friendly chatbot who always responds in the style of a pirate.",\n) as agent:\n    for resp in agent.query("Please give me a short poem about AI"):\n        agent.print(resp)\n'})})}),(0,a.jsx)(s,{value:"node",label:"JavaScript(Node)",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",metastring:"showLineNumbers",children:'const agent = await defineAgent(..., {\n  systemMessage:\n    "You are a friendly chatbot who always responds in the style of a pirate.",\n});\n\nfor await (const resp of agent.query("Please give me a short poem about AI")) {\n  agent.print(resp);\n}\nawait agent.delete();\n'})})})]}),"\n",(0,a.jsx)(n.h2,{id:"working-with-message-history",children:"Working with message history"}),"\n",(0,a.jsxs)(n.p,{children:["You can use ",(0,a.jsx)(n.code,{children:".get_messages()"})," to check the history of conversation messages so\nfar, and use ",(0,a.jsx)(n.code,{children:".clear_messages()"})," to clear the message history. Note that the\nsystem message is not removed and will always appear at the beginning of the\nmessage history."]}),"\n",(0,a.jsxs)(t,{groupId:"code-language",children:[(0,a.jsx)(s,{value:"python",label:"Python",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:'with Agent(...) as agent:\n    for resp in agent.query("The first question")\n        agent.print(resp)\n\n    # Get the message history\n    messages = agent.get_messages()\n\n    # Clear the message history\n    agent.clear_messages()\n'})})}),(0,a.jsx)(s,{value:"node",label:"JavaScript(Node)",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",metastring:"showLineNumbers",children:'const agent = await defineAgent(...);\nfor await (const resp of agent.query("The first question")) {\n  agent.print(resp);\n}\n\n// Get the message history\nconst messages = agent.getMessages();\n\n// Clear the message history\nagent.clearMessages();\n'})})})]})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(g,{...e})}):g(e)}function h(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>o});var t=s(6540);const a={},r=t.createContext(a);function i(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);