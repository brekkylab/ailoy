"use strict";(self.webpackChunkailoy_docs=self.webpackChunkailoy_docs||[]).push([[160],{1739:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"concepts/agent-response-format","title":"Agent Response Format","description":"Agent responses are the streamed output of the agent runs. Since Ailoy is","source":"@site/docs/concepts/agent-response-format.mdx","sourceDirName":"concepts","slug":"/concepts/agent-response-format","permalink":"/ailoy/docs/concepts/agent-response-format","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"documentSidebar","previous":{"title":"Architecture","permalink":"/ailoy/docs/concepts/architecture"},"next":{"title":"Devices & Environments","permalink":"/ailoy/docs/concepts/devices-environments"}}');var o=n(4848),r=n(8453);const i={},a="Agent Response Format",c={},l=[];function d(e){const t={a:"a",code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"agent-response-format",children:"Agent Response Format"})}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.strong,{children:"Agent responses"})," are the streamed output of the agent runs. Since Ailoy is\ndesigned to stream output on-the-fly, each part of the response can be treated\nas a real-time output."]}),"\n",(0,o.jsx)(t.p,{children:"Basically, an agent response has the following structure:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'{\n  type: One of ["output_text" | "tool_call" | "tool_call_result" | "reasoning" | "error"]\n  role: One of ["assistant" | "tool"];\n  is_type_switched: boolean\n  content: Depends on type;\n}\n'})}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["The ",(0,o.jsx)(t.code,{children:"type"})," field indicates what kind of output the agent is currently\nproducing. Depending on the type, the structure of the response may vary."]}),"\n",(0,o.jsxs)(t.li,{children:["The ",(0,o.jsx)(t.code,{children:"role"})," field specifies who is speaking\u2014either the Assistant (LLM model) or\na Tool."]}),"\n",(0,o.jsxs)(t.li,{children:["The ",(0,o.jsx)(t.code,{children:"is_type_switched"})," flag indicates whether this response is the first\nmessage of a new type. You can use this flag to detect when a new type of\nmessage has arrived and trigger actions in your application, such as creating\na new message box. See our\n",(0,o.jsx)(t.a,{href:"https://github.com/brekkylab/ailoy/tree/main/examples/gradio_chatbot",children:"Gradio chatbot example"}),"\nfor a detailed use case."]}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"Here are the descriptions of each response type:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"output_text"}),": This is the main textual output from the assistant. The\n",(0,o.jsx)(t.code,{children:"content"})," field contains a string with the generated text."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"tool_call"}),": A message indicating that the assistant is requesting a tool to\nbe invoked. Within the agent system, tools automatically receive this call and\nare expected to return a corresponding ",(0,o.jsx)(t.code,{children:"tool_call_result"}),". The ",(0,o.jsx)(t.code,{children:"content"}),"\ncontains a JSON-compatible dictionary describing the tool call."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"tool_call_result"}),": The result returned by the tool in response to a\n",(0,o.jsx)(t.code,{children:"tool_call"}),". The assistant receives this result and uses it to produce a final\nresponse to the user. The ",(0,o.jsx)(t.code,{children:"content"})," contains a JSON-compatible dictionary with\nthe tool's output."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"reasoning"}),": Intermediate reasoning steps produced by a reasoning-enabled\nmodel. The ",(0,o.jsx)(t.code,{children:"content"})," field contains a string with the generated reasoning. If\nthe ",(0,o.jsx)(t.code,{children:"ignore_reasoning_messages"})," flag is enabled, these messages are omitted\nfrom the output."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"error"}),": Indicates that an error has occurred. ",(0,o.jsx)(t.code,{children:"content"})," field contains the\nreason of the error. After error raised, no more responses will be generated."]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var s=n(6540);const o={},r=s.createContext(o);function i(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);