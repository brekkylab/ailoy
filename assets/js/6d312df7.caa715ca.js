"use strict";(self.webpackChunkailoy_docs=self.webpackChunkailoy_docs||[]).push([[66],{8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var o=t(6540);const r={},s=o.createContext(r);function a(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),o.createElement(s.Provider,{value:n},e.children)}},8482:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"tutorial/integrate-with-mcp","title":"Integrate with MCP","description":"The Model Context Protocol (MCP) is an open protocol developed by Anthropic","source":"@site/docs/tutorial/integrate-with-mcp.mdx","sourceDirName":"tutorial","slug":"/tutorial/integrate-with-mcp","permalink":"/ailoy/docs/tutorial/integrate-with-mcp","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"documentSidebar","previous":{"title":"Using Tools","permalink":"/ailoy/docs/tutorial/using-tools"},"next":{"title":"Calling Low-Level APIs","permalink":"/ailoy/docs/tutorial/calling-low-level-apis"}}');var r=t(4848),s=t(8453);const a={},i="Integrate with MCP",l={},c=[{value:"Using MCP with Ailoy",id:"using-mcp-with-ailoy",level:3},{value:"Querying via MCP Tools",id:"querying-via-mcp-tools",level:3},{value:"Complete Example",id:"complete-example",level:3}];function d(e){const n={code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components},{TabItem:t,Tabs:o}=n;return t||p("TabItem",!0),o||p("Tabs",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"integrate-with-mcp",children:"Integrate with MCP"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.strong,{children:"Model Context Protocol (MCP)"})," is an open protocol developed by Anthropic\nto standardize how language models interact with external systems\u2014such as tools,\nmemory backends, and context managers. MCP enables structured, dynamic\ncommunication between an LLM and its environment, empowering models to access\nexternal tools, retrieve real-time information, and perform complex, multi-step\nreasoning."]}),"\n",(0,r.jsx)(n.h3,{id:"using-mcp-with-ailoy",children:"Using MCP with Ailoy"}),"\n",(0,r.jsx)(n.p,{children:"Ailoy Agents can seamlessly integrate with existing MCP-compliant servers. For\nexample, the following code connects to the official GitHub MCP server:"}),"\n",(0,r.jsxs)(o,{groupId:"code-language",children:[(0,r.jsx)(t,{value:"python",label:"Python",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:'from mcp import StdioServerParameters\n\nagent.add_tools_from_mcp_server(\n    StdioServerParameters(\n        command="npx",\n        args=["-y", "@modelcontextprotocol/server-github"]\n    )\n)\n'})})}),(0,r.jsx)(t,{value:"node",label:"JavaScript(Node)",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:"showLineNumbers",children:'await agent.addToolsFromMcpServer({\n  command: "npx",\n  args: ["-y", "@modelcontextprotocol/server-github"],\n});\n'})})})]}),"\n",(0,r.jsx)(n.p,{children:"This launches the GitHub MCP server as a subprocess using standard I/O for\ncommunication. The agent automatically discovers the tools exposed by the server\nand registers them into its internal toolset."}),"\n",(0,r.jsx)(n.h3,{id:"querying-via-mcp-tools",children:"Querying via MCP Tools"}),"\n",(0,r.jsx)(n.p,{children:"Once the tools are registered, the agent can invoke them as needed when you\ncall the query() method:"}),"\n",(0,r.jsxs)(o,{groupId:"code-language",children:[(0,r.jsx)(t,{value:"python",label:"Python",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:'question = "Search the repository named brekkylab/ailoy and describe what it does based on its README.md."\nfor resp in agent.query(question):\n    agent.print(resp)\n'})})}),(0,r.jsx)(t,{value:"node",label:"JavaScript(Node)",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:"showLineNumbers",children:'const question =\n  "Search the repository named brekkylab/ailoy and describe what it does based on its README.md.";\nfor await (const resp of agent.query(question)) {\n  agent.print(resp);\n}\n'})})})]}),"\n",(0,r.jsx)(n.p,{children:"This demonstrates how the agent utilizes the GitHub MCP tools to search\nrepositories and summarize their contents."}),"\n",(0,r.jsx)(n.p,{children:"(TODO) console output"}),"\n",(0,r.jsx)(n.h3,{id:"complete-example",children:"Complete Example"}),"\n",(0,r.jsx)(n.p,{children:"Here is the full source code to set up an agent, connect it to the GitHub MCP\nserver, and issue a query:"}),"\n",(0,r.jsxs)(o,{groupId:"code-language",children:[(0,r.jsx)(t,{value:"python",label:"Python",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:'from ailoy import Runtime, Agent\nfrom mcp import StdioServerParameters\n\nrt = Runtime()\nwith Agent(rt, model_name="Qwen/Qwen3-8B") as agent:\n    # Add tools from Github MCP server\n    agent.add_tools_from_mcp_server(\n        StdioServerParameters(\n            command="npx",\n            args=["-y", "@modelcontextprotocol/server-github"]\n        )\n    )\n\n    question = "Search the repository named brekkylab/ailoy and describe what it does based on its README.md."\n    for resp in agent.query(question):\n        agent.print(resp)\n'})})}),(0,r.jsx)(t,{value:"node",label:"JavaScript(Node)",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:"showLineNumbers",children:'import { startRuntime, defineAgent } from "ailoy-node";\n\n(async () => {\n  const rt = await startRuntime();\n  const agent = await defineAgent(rt, { model: { name: "Qwen/Qwen3-8B" } });\n\n  // Add tools from Github MCP server\n  await agent.addToolsFromMcpServer({\n    command: "npx",\n    args: ["-y", "@modelcontextprotocol/server-github"],\n  });\n\n  const question =\n    "Search the repository named brekkylab/ailoy and describe what it does based on its README.md.";\n  for await (const resp of agent.query(question)) {\n    agent.print(resp);\n  }\n})();\n'})})})]})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}function p(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);